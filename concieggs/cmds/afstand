#!/usr/bin/env python3
#
# Brug: afstand fra <x> til <y>

import sys
import requests
import re

from math import radians, cos, sin, asin, sqrt 

KEY = "Am0UsRLD8vgF9F5jKMHI8uNBSVKiry6rzTqbQXWnG2xHa30YoCEV6cSynDE_oGrM"

def distance(lat1, lat2, lon1, lon2):
    lon1 = radians(lon1)
    lon2 = radians(lon2)
    lat1 = radians(lat1)
    lat2 = radians(lat2)
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * asin(sqrt(a))
    r = 6371
    return c * r


def get_coords(name):
    place_url = "http://dev.virtualearth.net/REST/v1/Locations"
    payload = {"q": name, "key": KEY}
    data = requests.get(place_url, params=payload).json()
    cs = data["resourceSets"][0]["resources"][0]["point"]["coordinates"]
    return (cs[0], cs[1])

def print_distance(place1, place2):
    (start_lat, start_lon) = get_coords(place1)
    (end_lat, end_lon) = get_coords(place2)

    dist_direct = distance(start_lat, end_lat, start_lon, end_lon)

	# Get for driving
    payload = {
        "origins": f"{start_lat}, {start_lon}",
        "destinations": f"{end_lat}, {end_lon}",
        "travelMode": "driving",
        "key": KEY
    }
    dist_url = "https://dev.virtualearth.net/REST/v1/Routes/DistanceMatrix"

    data = requests.get(dist_url, params=payload).json()
    results = data["resourceSets"][0]["resources"][0]["results"][0]
    
    dist_driving = results["travelDistance"]
    
    # Get for transit
    payload["travelMode"] = "transit"
    data = requests.get(dist_url, params=payload).json()
    results = data["resourceSets"][0]["resources"][0]["results"][0]
    
    dur_transit = results["travelDuration"]

    if dist_driving == -1.0 and dur_transit == -1.0:
        print(f"Afstanden fra {place1} til {place2} i fugleflugt er {dist_direct:.1f} km.")
    elif dur_transit == -1.0:
        print(f"Afstanden fra {place1} til {place2} i bil er {dist_driving:.1f} km, hvis du flyver er der {dist_direct:.1f} km.")
    elif dist_driving == -1.0:
        print(f"Afstanden fra {place1} til {place2} tager {dur_transit:.0f} minutter med almuen, hvis du flyver er der {dist_direct:.1f} km.")
    else:
        print(f"Afstanden fra {place1} til {place2} i bil er {dist_driving:.1f} km, men med almuen tager den {dur_transit:.0f} minutter, hvis du flyver er der {dist_direct:.1f} km.")


inp = " ".join(sys.argv[2:])

[p1, p2] = inp.split(" til ")

print_distance(p1, p2)
