#!/usr/bin/env runsbcl

(defun fields (c string)
  "Returns a list of substrings of string
divided by ONE space each.
Note: Two consecutive spaces will be seen as
if there were an empty string between them."
  (loop for i = 0 then (1+ j)
        as j = (position c string :start i)
        collect (subseq string i j)
        while j))

(defun lines (s) (fields #\Newline s))

(defun unencode (s)
  (with-output-to-string (output)
    (with-input-from-string (input s)
      (sb-ext:run-program
       "/usr/bin/env"
       '("python3" "-c" "import html, sys; [print(html.unescape(l), end=\"\") for l in sys.stdin]")
       :input input
       :output output))))

(defun remove-from-first-tag (s)
  (let ((front (position #\< s)))
    (if (null front)
        s
        (subseq s 0 front))))

(defun ordnet-query (query)
  (let* ((body (with-output-to-string (s)
                 (sb-ext:run-program
                  "/usr/bin/env"
                  (list "curl" "-s" (format nil "https://ordnet.dk/ddo/ordbog?query=~A" query))
                  :output s)))
         (without-faste-udtryk
             (let ((pos (search "id=\"faste-udtryk\"" body)))
               (if pos
                   (subseq body 0 pos)
                   body)))
         (definition-lines (delete-if-not (lambda (line)
                                            (search "class=\"definition\"" line))
                                          (lines without-faste-udtryk))))
    (map 'list (lambda (line)
                 (let ((front (position #\> line))
                       (end (position #\< line :from-end t)))
                   (remove-from-first-tag
                    (unencode
                     (if (and (not (null front)) (not (null end)))
                         (subseq line (1+ front) end)
                         line)))))
         definition-lines)))

(defun define (query)
  (when (not (null query))
    (let ((response (ordnet-query query)))
      (map nil (lambda (betydning) (format t "~A~%" betydning)) response))))

(defun main ()
  (define (second sb-ext:*posix-argv*)))

(main)
